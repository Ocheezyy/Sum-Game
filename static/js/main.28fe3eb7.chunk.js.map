{"version":3,"sources":["logo.svg","Game.js","App.js","index.js"],"names":["module","exports","StarsDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","timeLimit","React","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","setGameId","App","src","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28fe3eb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './Game.css';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n      {utils.range(1, props.count).map(starId => (\r\n        <div key={starId} className=\"star\" />\r\n      ))}\r\n    </>\r\n  );\r\n  \r\n  const PlayNumber = props => (\r\n    <button\r\n      className=\"number\"\r\n      style={{backgroundColor: colors[props.status]}}\r\n      onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n      {props.number}\r\n    </button>\r\n  );\r\n  \r\n  const PlayAgain = props => (\r\n      <div className=\"game-done\">\r\n        <div \r\n          className=\"message\"\r\n        style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n      >\r\n          {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n      </div>\r\n  );\r\n  \r\n  const useGameState = timeLimit => {\r\n    const [stars, setStars] = React.useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = React.useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = React.useState([]);\r\n    const [secondsLeft, setSecondsLeft] = React.useState(10);\r\n  \r\n    React.useEffect(() => {\r\n      if (secondsLeft > 0 && availableNums.length > 0) {\r\n        const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n        return () => clearTimeout(timerId);\r\n      }\r\n    });\r\n  \r\n    const setGameState = (newCandidateNums) => {\r\n      if (utils.sum(newCandidateNums) !== stars) {\r\n              setCandidateNums(newCandidateNums);\r\n      } else {\r\n        const newAvailableNums = availableNums.filter(\r\n          n => !newCandidateNums.includes(n)\r\n        );\r\n        setStars(utils.randomSumIn(newAvailableNums, 9));\r\n        setAvailableNums(newAvailableNums);\r\n        setCandidateNums([]);\r\n      }\r\n    };\r\n  \r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n  };\r\n  \r\n  const Game = props => {\r\n    const {\r\n      stars,\r\n      availableNums,\r\n      candidateNums,\r\n      secondsLeft,\r\n      setGameState,\r\n    } = useGameState();\r\n  \r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameStatus = availableNums.length === 0 \r\n        ? 'won'\r\n      : secondsLeft === 0 ? 'lost' : 'active'\r\n  \r\n    const numberStatus = number => {\r\n      if (!availableNums.includes(number)) {\r\n        return 'used';\r\n      }\r\n  \r\n      if (candidateNums.includes(number)) {\r\n        return candidatesAreWrong ? 'wrong' : 'candidate';\r\n      }\r\n  \r\n      return 'available';\r\n    };\r\n  \r\n    const onNumberClick = (number, currentStatus) => {\r\n      if (currentStatus === 'used' || secondsLeft === 0) {\r\n        return;\r\n      }\r\n  \r\n      const newCandidateNums =\r\n        currentStatus === 'available'\r\n          ? candidateNums.concat(number)\r\n          : candidateNums.filter(cn => cn !== number);\r\n  \r\n      setGameState(newCandidateNums);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"help\">\r\n          Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"left\">\r\n            {gameStatus !== 'active' ? (\r\n                <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n            ) : (\r\n                <StarsDisplay count={stars} />\r\n            )}\r\n          </div>\r\n          <div className=\"right\">\r\n            {utils.range(1, 9).map(number => (\r\n              <PlayNumber\r\n                key={number}\r\n                status={numberStatus(number)}\r\n                number={number}\r\n                onClick={onNumberClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const StarMatch = () => {\r\n      const [gameId, setGameId] = React.useState(1);\r\n      return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\r\n  }\r\n  \r\n  // Color Theme\r\n  const colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n  \r\n  //ReactDOM.render(<StarMatch />, 'root');\r\n  //serviceWorker.unregister();\r\n\t\r\n  export default StarMatch","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport StarMatch from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <StarMatch />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import StarMatch from './Game';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}